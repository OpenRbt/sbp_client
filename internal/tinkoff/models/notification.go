// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Notification notification
//
// swagger:model Notification
type Notification struct {

	// Идентификатор привязки счета, назначаемый банком-эмитентом
	AccountToken string `json:"AccountToken,omitempty"`

	// amount
	Amount int64 `json:"Amount,omitempty"`

	// Идентификатор банка-эмитента клиента, который будет совершать оплату по привязанному счету
	BankMemberID string `json:"BankMemberId,omitempty"`

	// Наименование банка-эмитента
	BankMemberName string `json:"BankMemberName,omitempty"`

	// card Id
	CardID int64 `json:"CardId,omitempty"`

	// details
	Details string `json:"Details,omitempty"`

	// error code
	ErrorCode string `json:"ErrorCode,omitempty"`

	// exp date
	ExpDate string `json:"ExpDate,omitempty"`

	// message
	Message string `json:"Message,omitempty"`

	// Код ошибки (<= 20 символов)
	NotificationType string `json:"NotificationType,omitempty"`

	// order Id
	OrderID string `json:"OrderId,omitempty"`

	// pan
	Pan string `json:"Pan,omitempty"`

	// payment Id
	PaymentID string `json:"PaymentId,omitempty"`

	// payment URL
	PaymentURL string `json:"PaymentURL,omitempty"`

	// rebill Id
	RebillID string `json:"RebillId,omitempty"`

	// Идентификатор запроса на привязку счета
	RequestKey string `json:"RequestKey,omitempty"`

	// status
	Status string `json:"Status,omitempty"`

	// success
	Success bool `json:"Success,omitempty"`

	// terminal key
	TerminalKey string `json:"TerminalKey,omitempty"`

	// token
	Token string `json:"Token,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Notification) UnmarshalJSON(data []byte) error {
	var props struct {

		// Идентификатор привязки счета, назначаемый банком-эмитентом
		AccountToken string `json:"AccountToken,omitempty"`

		// amount
		Amount int64 `json:"Amount,omitempty"`

		// Идентификатор банка-эмитента клиента, который будет совершать оплату по привязанному счету
		BankMemberID string `json:"BankMemberId,omitempty"`

		// Наименование банка-эмитента
		BankMemberName string `json:"BankMemberName,omitempty"`

		// card Id
		CardID int64 `json:"CardId,omitempty"`

		// details
		Details string `json:"Details,omitempty"`

		// error code
		ErrorCode string `json:"ErrorCode,omitempty"`

		// exp date
		ExpDate string `json:"ExpDate,omitempty"`

		// message
		Message string `json:"Message,omitempty"`

		// Код ошибки (<= 20 символов)
		NotificationType string `json:"NotificationType,omitempty"`

		// order Id
		OrderID string `json:"OrderId,omitempty"`

		// pan
		Pan string `json:"Pan,omitempty"`

		// payment Id
		PaymentID string `json:"PaymentId,omitempty"`

		// payment URL
		PaymentURL string `json:"PaymentURL,omitempty"`

		// rebill Id
		RebillID string `json:"RebillId,omitempty"`

		// Идентификатор запроса на привязку счета
		RequestKey string `json:"RequestKey,omitempty"`

		// status
		Status string `json:"Status,omitempty"`

		// success
		Success bool `json:"Success,omitempty"`

		// terminal key
		TerminalKey string `json:"TerminalKey,omitempty"`

		// token
		Token string `json:"Token,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.AccountToken = props.AccountToken
	m.Amount = props.Amount
	m.BankMemberID = props.BankMemberID
	m.BankMemberName = props.BankMemberName
	m.CardID = props.CardID
	m.Details = props.Details
	m.ErrorCode = props.ErrorCode
	m.ExpDate = props.ExpDate
	m.Message = props.Message
	m.NotificationType = props.NotificationType
	m.OrderID = props.OrderID
	m.Pan = props.Pan
	m.PaymentID = props.PaymentID
	m.PaymentURL = props.PaymentURL
	m.RebillID = props.RebillID
	m.RequestKey = props.RequestKey
	m.Status = props.Status
	m.Success = props.Success
	m.TerminalKey = props.TerminalKey
	m.Token = props.Token
	return nil
}

// Validate validates this notification
func (m *Notification) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this notification based on context it is used
func (m *Notification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Notification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Notification) UnmarshalBinary(b []byte) error {
	var res Notification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
