// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"sbp/openapi/models"
)

// AddReader is a Reader for the Add structure.
type AddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddOK creates a AddOK with default headers values
func NewAddOK() *AddOK {
	return &AddOK{}
}

/*
AddOK describes a response with status code 200, with default header values.

Success creation
*/
type AddOK struct {
	Payload *models.WashServer
}

// IsSuccess returns true when this add o k response has a 2xx status code
func (o *AddOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add o k response has a 3xx status code
func (o *AddOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add o k response has a 4xx status code
func (o *AddOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add o k response has a 5xx status code
func (o *AddOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add o k response a status code equal to that given
func (o *AddOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add o k response
func (o *AddOK) Code() int {
	return 200
}

func (o *AddOK) Error() string {
	return fmt.Sprintf("[PUT /wash-server/][%d] addOK  %+v", 200, o.Payload)
}

func (o *AddOK) String() string {
	return fmt.Sprintf("[PUT /wash-server/][%d] addOK  %+v", 200, o.Payload)
}

func (o *AddOK) GetPayload() *models.WashServer {
	return o.Payload
}

func (o *AddOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WashServer)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddBadRequest creates a AddBadRequest with default headers values
func NewAddBadRequest() *AddBadRequest {
	return &AddBadRequest{}
}

/*
AddBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AddBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this add bad request response has a 2xx status code
func (o *AddBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add bad request response has a 3xx status code
func (o *AddBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add bad request response has a 4xx status code
func (o *AddBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add bad request response has a 5xx status code
func (o *AddBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add bad request response a status code equal to that given
func (o *AddBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add bad request response
func (o *AddBadRequest) Code() int {
	return 400
}

func (o *AddBadRequest) Error() string {
	return fmt.Sprintf("[PUT /wash-server/][%d] addBadRequest  %+v", 400, o.Payload)
}

func (o *AddBadRequest) String() string {
	return fmt.Sprintf("[PUT /wash-server/][%d] addBadRequest  %+v", 400, o.Payload)
}

func (o *AddBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInternalServerError creates a AddInternalServerError with default headers values
func NewAddInternalServerError() *AddInternalServerError {
	return &AddInternalServerError{}
}

/*
AddInternalServerError describes a response with status code 500, with default header values.

Internal error
*/
type AddInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this add internal server error response has a 2xx status code
func (o *AddInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add internal server error response has a 3xx status code
func (o *AddInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add internal server error response has a 4xx status code
func (o *AddInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add internal server error response has a 5xx status code
func (o *AddInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add internal server error response a status code equal to that given
func (o *AddInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add internal server error response
func (o *AddInternalServerError) Code() int {
	return 500
}

func (o *AddInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /wash-server/][%d] addInternalServerError  %+v", 500, o.Payload)
}

func (o *AddInternalServerError) String() string {
	return fmt.Sprintf("[PUT /wash-server/][%d] addInternalServerError  %+v", 500, o.Payload)
}

func (o *AddInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
