// Code generated by go-swagger; DO NOT EDIT.

package wash

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"sbp/openapi/models"
)

// PayReader is a Reader for the Pay structure.
type PayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPayBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pay] pay", response, response.Code())
	}
}

// NewPayOK creates a PayOK with default headers values
func NewPayOK() *PayOK {
	return &PayOK{}
}

/*
PayOK describes a response with status code 200, with default header values.

OK
*/
type PayOK struct {
	Payload *models.PayResponse
}

// IsSuccess returns true when this pay o k response has a 2xx status code
func (o *PayOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pay o k response has a 3xx status code
func (o *PayOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pay o k response has a 4xx status code
func (o *PayOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pay o k response has a 5xx status code
func (o *PayOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pay o k response a status code equal to that given
func (o *PayOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pay o k response
func (o *PayOK) Code() int {
	return 200
}

func (o *PayOK) Error() string {
	return fmt.Sprintf("[POST /pay][%d] payOK  %+v", 200, o.Payload)
}

func (o *PayOK) String() string {
	return fmt.Sprintf("[POST /pay][%d] payOK  %+v", 200, o.Payload)
}

func (o *PayOK) GetPayload() *models.PayResponse {
	return o.Payload
}

func (o *PayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PayResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPayBadRequest creates a PayBadRequest with default headers values
func NewPayBadRequest() *PayBadRequest {
	return &PayBadRequest{}
}

/*
PayBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PayBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this pay bad request response has a 2xx status code
func (o *PayBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pay bad request response has a 3xx status code
func (o *PayBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pay bad request response has a 4xx status code
func (o *PayBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pay bad request response has a 5xx status code
func (o *PayBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pay bad request response a status code equal to that given
func (o *PayBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the pay bad request response
func (o *PayBadRequest) Code() int {
	return 400
}

func (o *PayBadRequest) Error() string {
	return fmt.Sprintf("[POST /pay][%d] payBadRequest  %+v", 400, o.Payload)
}

func (o *PayBadRequest) String() string {
	return fmt.Sprintf("[POST /pay][%d] payBadRequest  %+v", 400, o.Payload)
}

func (o *PayBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PayBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
