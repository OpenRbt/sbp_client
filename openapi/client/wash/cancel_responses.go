// Code generated by go-swagger; DO NOT EDIT.

package wash

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"sbp/openapi/models"
)

// CancelReader is a Reader for the Cancel structure.
type CancelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /cancel] cancel", response, response.Code())
	}
}

// NewCancelOK creates a CancelOK with default headers values
func NewCancelOK() *CancelOK {
	return &CancelOK{}
}

/*
CancelOK describes a response with status code 200, with default header values.

OK
*/
type CancelOK struct {
}

// IsSuccess returns true when this cancel o k response has a 2xx status code
func (o *CancelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel o k response has a 3xx status code
func (o *CancelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel o k response has a 4xx status code
func (o *CancelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel o k response has a 5xx status code
func (o *CancelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel o k response a status code equal to that given
func (o *CancelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cancel o k response
func (o *CancelOK) Code() int {
	return 200
}

func (o *CancelOK) Error() string {
	return fmt.Sprintf("[POST /cancel][%d] cancelOK ", 200)
}

func (o *CancelOK) String() string {
	return fmt.Sprintf("[POST /cancel][%d] cancelOK ", 200)
}

func (o *CancelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelBadRequest creates a CancelBadRequest with default headers values
func NewCancelBadRequest() *CancelBadRequest {
	return &CancelBadRequest{}
}

/*
CancelBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CancelBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this cancel bad request response has a 2xx status code
func (o *CancelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel bad request response has a 3xx status code
func (o *CancelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel bad request response has a 4xx status code
func (o *CancelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel bad request response has a 5xx status code
func (o *CancelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel bad request response a status code equal to that given
func (o *CancelBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cancel bad request response
func (o *CancelBadRequest) Code() int {
	return 400
}

func (o *CancelBadRequest) Error() string {
	return fmt.Sprintf("[POST /cancel][%d] cancelBadRequest  %+v", 400, o.Payload)
}

func (o *CancelBadRequest) String() string {
	return fmt.Sprintf("[POST /cancel][%d] cancelBadRequest  %+v", 400, o.Payload)
}

func (o *CancelBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelForbidden creates a CancelForbidden with default headers values
func NewCancelForbidden() *CancelForbidden {
	return &CancelForbidden{}
}

/*
CancelForbidden describes a response with status code 403, with default header values.

Access denied
*/
type CancelForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this cancel forbidden response has a 2xx status code
func (o *CancelForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel forbidden response has a 3xx status code
func (o *CancelForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel forbidden response has a 4xx status code
func (o *CancelForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel forbidden response has a 5xx status code
func (o *CancelForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel forbidden response a status code equal to that given
func (o *CancelForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cancel forbidden response
func (o *CancelForbidden) Code() int {
	return 403
}

func (o *CancelForbidden) Error() string {
	return fmt.Sprintf("[POST /cancel][%d] cancelForbidden  %+v", 403, o.Payload)
}

func (o *CancelForbidden) String() string {
	return fmt.Sprintf("[POST /cancel][%d] cancelForbidden  %+v", 403, o.Payload)
}

func (o *CancelForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
