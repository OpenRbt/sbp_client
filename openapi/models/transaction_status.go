// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransactionStatus transaction status
//
// swagger:model TransactionStatus
type TransactionStatus string

func NewTransactionStatus(value TransactionStatus) *TransactionStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TransactionStatus.
func (m TransactionStatus) Pointer() *TransactionStatus {
	return &m
}

const (

	// TransactionStatusNew captures enum value "new"
	TransactionStatusNew TransactionStatus = "new"

	// TransactionStatusAuthorized captures enum value "authorized"
	TransactionStatusAuthorized TransactionStatus = "authorized"

	// TransactionStatusConfirmedNotSynced captures enum value "confirmed_not_synced"
	TransactionStatusConfirmedNotSynced TransactionStatus = "confirmed_not_synced"

	// TransactionStatusConfirmed captures enum value "confirmed"
	TransactionStatusConfirmed TransactionStatus = "confirmed"

	// TransactionStatusCanceling captures enum value "canceling"
	TransactionStatusCanceling TransactionStatus = "canceling"

	// TransactionStatusCanceled captures enum value "canceled"
	TransactionStatusCanceled TransactionStatus = "canceled"

	// TransactionStatusRefunded captures enum value "refunded"
	TransactionStatusRefunded TransactionStatus = "refunded"

	// TransactionStatusUnknown captures enum value "unknown"
	TransactionStatusUnknown TransactionStatus = "unknown"
)

// for schema
var transactionStatusEnum []interface{}

func init() {
	var res []TransactionStatus
	if err := json.Unmarshal([]byte(`["new","authorized","confirmed_not_synced","confirmed","canceling","canceled","refunded","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionStatusEnum = append(transactionStatusEnum, v)
	}
}

func (m TransactionStatus) validateTransactionStatusEnum(path, location string, value TransactionStatus) error {
	if err := validate.EnumCase(path, location, value, transactionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transaction status
func (m TransactionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransactionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transaction status based on context it is used
func (m TransactionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
