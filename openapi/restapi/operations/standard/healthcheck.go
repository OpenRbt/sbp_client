// Code generated by go-swagger; DO NOT EDIT.

package standard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"sbp/internal/entities"
)

// HealthcheckHandlerFunc turns a function with the right signature into a healthcheck handler
type HealthcheckHandlerFunc func(HealthcheckParams, *entities.Auth) HealthcheckResponder

// Handle executing the request and returning a response
func (fn HealthcheckHandlerFunc) Handle(params HealthcheckParams, principal *entities.Auth) HealthcheckResponder {
	return fn(params, principal)
}

// HealthcheckHandler interface for that can handle valid healthcheck params
type HealthcheckHandler interface {
	Handle(HealthcheckParams, *entities.Auth) HealthcheckResponder
}

// NewHealthcheck creates a new http.Handler for the healthcheck operation
func NewHealthcheck(ctx *middleware.Context, handler HealthcheckHandler) *Healthcheck {
	return &Healthcheck{Context: ctx, Handler: handler}
}

/* Healthcheck swagger:route GET /healthcheck standard healthcheck

Healthcheck healthcheck API

*/
type Healthcheck struct {
	Context *middleware.Context
	Handler HealthcheckHandler
}

func (o *Healthcheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewHealthcheckParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *entities.Auth
	if uprinc != nil {
		principal = uprinc.(*entities.Auth) // this is really a entities.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// HealthcheckOKBody healthcheck o k body
//
// swagger:model HealthcheckOKBody
type HealthcheckOKBody struct {

	// ok
	Ok bool `json:"ok,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *HealthcheckOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// ok
		Ok bool `json:"ok,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.Ok = props.Ok
	return nil
}

// Validate validates this healthcheck o k body
func (o *HealthcheckOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this healthcheck o k body based on context it is used
func (o *HealthcheckOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *HealthcheckOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *HealthcheckOKBody) UnmarshalBinary(b []byte) error {
	var res HealthcheckOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
