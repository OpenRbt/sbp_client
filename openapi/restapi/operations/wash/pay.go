// Code generated by go-swagger; DO NOT EDIT.

package wash

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"sbp/internal/logic/entities"
)

// PayHandlerFunc turns a function with the right signature into a pay handler
type PayHandlerFunc func(PayParams, *entities.AuthExtended) PayResponder

// Handle executing the request and returning a response
func (fn PayHandlerFunc) Handle(params PayParams, principal *entities.AuthExtended) PayResponder {
	return fn(params, principal)
}

// PayHandler interface for that can handle valid pay params
type PayHandler interface {
	Handle(PayParams, *entities.AuthExtended) PayResponder
}

// NewPay creates a new http.Handler for the pay operation
func NewPay(ctx *middleware.Context, handler PayHandler) *Pay {
	return &Pay{Context: ctx, Handler: handler}
}

/*
	Pay swagger:route POST /pay wash pay

Pay pay API
*/
type Pay struct {
	Context *middleware.Context
	Handler PayHandler
}

func (o *Pay) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPayParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *entities.AuthExtended
	if uprinc != nil {
		principal = uprinc.(*entities.AuthExtended) // this is really a entities.AuthExtended, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
