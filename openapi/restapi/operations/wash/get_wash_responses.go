// Code generated by go-swagger; DO NOT EDIT.

package wash

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"sbp/openapi/models"
)

// GetWashOKCode is the HTTP code returned for type GetWashOK
const GetWashOKCode int = 200

/*
GetWashOK OK

swagger:response getWashOK
*/
type GetWashOK struct {

	/*
	  In: Body
	*/
	Payload *models.Wash `json:"body,omitempty"`
}

// NewGetWashOK creates GetWashOK with default headers values
func NewGetWashOK() *GetWashOK {

	return &GetWashOK{}
}

// WithPayload adds the payload to the get wash o k response
func (o *GetWashOK) WithPayload(payload *models.Wash) *GetWashOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wash o k response
func (o *GetWashOK) SetPayload(payload *models.Wash) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWashOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWashOK) GetWashResponder() {}

// GetWashBadRequestCode is the HTTP code returned for type GetWashBadRequest
const GetWashBadRequestCode int = 400

/*
GetWashBadRequest Bad request

swagger:response getWashBadRequest
*/
type GetWashBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWashBadRequest creates GetWashBadRequest with default headers values
func NewGetWashBadRequest() *GetWashBadRequest {

	return &GetWashBadRequest{}
}

// WithPayload adds the payload to the get wash bad request response
func (o *GetWashBadRequest) WithPayload(payload *models.Error) *GetWashBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wash bad request response
func (o *GetWashBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWashBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWashBadRequest) GetWashResponder() {}

// GetWashForbiddenCode is the HTTP code returned for type GetWashForbidden
const GetWashForbiddenCode int = 403

/*
GetWashForbidden Access denied

swagger:response getWashForbidden
*/
type GetWashForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWashForbidden creates GetWashForbidden with default headers values
func NewGetWashForbidden() *GetWashForbidden {

	return &GetWashForbidden{}
}

// WithPayload adds the payload to the get wash forbidden response
func (o *GetWashForbidden) WithPayload(payload *models.Error) *GetWashForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wash forbidden response
func (o *GetWashForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWashForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWashForbidden) GetWashResponder() {}

// GetWashNotFoundCode is the HTTP code returned for type GetWashNotFound
const GetWashNotFoundCode int = 404

/*
GetWashNotFound Wash not exists

swagger:response getWashNotFound
*/
type GetWashNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWashNotFound creates GetWashNotFound with default headers values
func NewGetWashNotFound() *GetWashNotFound {

	return &GetWashNotFound{}
}

// WithPayload adds the payload to the get wash not found response
func (o *GetWashNotFound) WithPayload(payload *models.Error) *GetWashNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wash not found response
func (o *GetWashNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWashNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWashNotFound) GetWashResponder() {}

// GetWashInternalServerErrorCode is the HTTP code returned for type GetWashInternalServerError
const GetWashInternalServerErrorCode int = 500

/*
GetWashInternalServerError Internal error

swagger:response getWashInternalServerError
*/
type GetWashInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWashInternalServerError creates GetWashInternalServerError with default headers values
func NewGetWashInternalServerError() *GetWashInternalServerError {

	return &GetWashInternalServerError{}
}

// WithPayload adds the payload to the get wash internal server error response
func (o *GetWashInternalServerError) WithPayload(payload *models.Error) *GetWashInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wash internal server error response
func (o *GetWashInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWashInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWashInternalServerError) GetWashResponder() {}

type GetWashNotImplementedResponder struct {
	middleware.Responder
}

func (*GetWashNotImplementedResponder) GetWashResponder() {}

func GetWashNotImplemented() GetWashResponder {
	return &GetWashNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.GetWash has not yet been implemented",
		),
	}
}

type GetWashResponder interface {
	middleware.Responder
	GetWashResponder()
}
