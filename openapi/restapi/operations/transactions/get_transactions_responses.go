// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"sbp/openapi/models"
)

// GetTransactionsOKCode is the HTTP code returned for type GetTransactionsOK
const GetTransactionsOKCode int = 200

/*
GetTransactionsOK OK

swagger:response getTransactionsOK
*/
type GetTransactionsOK struct {

	/*
	  In: Body
	*/
	Payload *models.TransactionPage `json:"body,omitempty"`
}

// NewGetTransactionsOK creates GetTransactionsOK with default headers values
func NewGetTransactionsOK() *GetTransactionsOK {

	return &GetTransactionsOK{}
}

// WithPayload adds the payload to the get transactions o k response
func (o *GetTransactionsOK) WithPayload(payload *models.TransactionPage) *GetTransactionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get transactions o k response
func (o *GetTransactionsOK) SetPayload(payload *models.TransactionPage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTransactionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetTransactionsOK) GetTransactionsResponder() {}

// GetTransactionsForbiddenCode is the HTTP code returned for type GetTransactionsForbidden
const GetTransactionsForbiddenCode int = 403

/*
GetTransactionsForbidden Generic error response

swagger:response getTransactionsForbidden
*/
type GetTransactionsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTransactionsForbidden creates GetTransactionsForbidden with default headers values
func NewGetTransactionsForbidden() *GetTransactionsForbidden {

	return &GetTransactionsForbidden{}
}

// WithPayload adds the payload to the get transactions forbidden response
func (o *GetTransactionsForbidden) WithPayload(payload *models.Error) *GetTransactionsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get transactions forbidden response
func (o *GetTransactionsForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTransactionsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetTransactionsForbidden) GetTransactionsResponder() {}

// GetTransactionsNotFoundCode is the HTTP code returned for type GetTransactionsNotFound
const GetTransactionsNotFoundCode int = 404

/*
GetTransactionsNotFound Generic error response

swagger:response getTransactionsNotFound
*/
type GetTransactionsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTransactionsNotFound creates GetTransactionsNotFound with default headers values
func NewGetTransactionsNotFound() *GetTransactionsNotFound {

	return &GetTransactionsNotFound{}
}

// WithPayload adds the payload to the get transactions not found response
func (o *GetTransactionsNotFound) WithPayload(payload *models.Error) *GetTransactionsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get transactions not found response
func (o *GetTransactionsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTransactionsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetTransactionsNotFound) GetTransactionsResponder() {}

/*
GetTransactionsDefault Generic error response

swagger:response getTransactionsDefault
*/
type GetTransactionsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTransactionsDefault creates GetTransactionsDefault with default headers values
func NewGetTransactionsDefault(code int) *GetTransactionsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetTransactionsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get transactions default response
func (o *GetTransactionsDefault) WithStatusCode(code int) *GetTransactionsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get transactions default response
func (o *GetTransactionsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get transactions default response
func (o *GetTransactionsDefault) WithPayload(payload *models.Error) *GetTransactionsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get transactions default response
func (o *GetTransactionsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTransactionsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetTransactionsDefault) GetTransactionsResponder() {}

type GetTransactionsNotImplementedResponder struct {
	middleware.Responder
}

func (*GetTransactionsNotImplementedResponder) GetTransactionsResponder() {}

func GetTransactionsNotImplemented() GetTransactionsResponder {
	return &GetTransactionsNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.GetTransactions has not yet been implemented",
		),
	}
}

type GetTransactionsResponder interface {
	middleware.Responder
	GetTransactionsResponder()
}
