// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetTransactionsURL generates an URL for the get transactions operation
type GetTransactionsURL struct {
	GroupID        *strfmt.UUID
	OrganizationID *strfmt.UUID
	Page           *int64
	PageSize       *int64
	PostID         *int64
	Status         *string
	WashID         *strfmt.UUID

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetTransactionsURL) WithBasePath(bp string) *GetTransactionsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetTransactionsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetTransactionsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/transactions"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var groupIDQ string
	if o.GroupID != nil {
		groupIDQ = o.GroupID.String()
	}
	if groupIDQ != "" {
		qs.Set("groupId", groupIDQ)
	}

	var organizationIDQ string
	if o.OrganizationID != nil {
		organizationIDQ = o.OrganizationID.String()
	}
	if organizationIDQ != "" {
		qs.Set("organizationId", organizationIDQ)
	}

	var pageQ string
	if o.Page != nil {
		pageQ = swag.FormatInt64(*o.Page)
	}
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	var pageSizeQ string
	if o.PageSize != nil {
		pageSizeQ = swag.FormatInt64(*o.PageSize)
	}
	if pageSizeQ != "" {
		qs.Set("pageSize", pageSizeQ)
	}

	var postIDQ string
	if o.PostID != nil {
		postIDQ = swag.FormatInt64(*o.PostID)
	}
	if postIDQ != "" {
		qs.Set("postId", postIDQ)
	}

	var statusQ string
	if o.Status != nil {
		statusQ = *o.Status
	}
	if statusQ != "" {
		qs.Set("status", statusQ)
	}

	var washIDQ string
	if o.WashID != nil {
		washIDQ = o.WashID.String()
	}
	if washIDQ != "" {
		qs.Set("washId", washIDQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetTransactionsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetTransactionsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetTransactionsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetTransactionsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetTransactionsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetTransactionsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
