// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"sbp/openapi/models"
)

// NotificationOKCode is the HTTP code returned for type NotificationOK
const NotificationOKCode int = 200

/*
NotificationOK OK

swagger:response notificationOK
*/
type NotificationOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewNotificationOK creates NotificationOK with default headers values
func NewNotificationOK() *NotificationOK {

	return &NotificationOK{}
}

// WithPayload adds the payload to the notification o k response
func (o *NotificationOK) WithPayload(payload string) *NotificationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notification o k response
func (o *NotificationOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotificationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (o *NotificationOK) NotificationResponder() {}

// NotificationInternalServerErrorCode is the HTTP code returned for type NotificationInternalServerError
const NotificationInternalServerErrorCode int = 500

/*
NotificationInternalServerError Internal error

swagger:response notificationInternalServerError
*/
type NotificationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewNotificationInternalServerError creates NotificationInternalServerError with default headers values
func NewNotificationInternalServerError() *NotificationInternalServerError {

	return &NotificationInternalServerError{}
}

// WithPayload adds the payload to the notification internal server error response
func (o *NotificationInternalServerError) WithPayload(payload *models.Error) *NotificationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the notification internal server error response
func (o *NotificationInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NotificationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *NotificationInternalServerError) NotificationResponder() {}

type NotificationNotImplementedResponder struct {
	middleware.Responder
}

func (*NotificationNotImplementedResponder) NotificationResponder() {}

func NotificationNotImplemented() NotificationResponder {
	return &NotificationNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.Notification has not yet been implemented",
		),
	}
}

type NotificationResponder interface {
	middleware.Responder
	NotificationResponder()
}
