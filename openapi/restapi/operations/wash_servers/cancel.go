// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"sbp/internal/app"
)

// CancelHandlerFunc turns a function with the right signature into a cancel handler
type CancelHandlerFunc func(CancelParams, *app.Auth) CancelResponder

// Handle executing the request and returning a response
func (fn CancelHandlerFunc) Handle(params CancelParams, principal *app.Auth) CancelResponder {
	return fn(params, principal)
}

// CancelHandler interface for that can handle valid cancel params
type CancelHandler interface {
	Handle(CancelParams, *app.Auth) CancelResponder
}

// NewCancel creates a new http.Handler for the cancel operation
func NewCancel(ctx *middleware.Context, handler CancelHandler) *Cancel {
	return &Cancel{Context: ctx, Handler: handler}
}

/*
	Cancel swagger:route POST /cancel wash_servers cancel

Cancel cancel API
*/
type Cancel struct {
	Context *middleware.Context
	Handler CancelHandler
}

func (o *Cancel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCancelParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *app.Auth
	if uprinc != nil {
		principal = uprinc.(*app.Auth) // this is really a app.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
