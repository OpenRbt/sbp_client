// Code generated by go-swagger; DO NOT EDIT.

package wash_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"sbp/openapi/models"
)

// PayOKCode is the HTTP code returned for type PayOK
const PayOKCode int = 200

/*
PayOK OK

swagger:response payOK
*/
type PayOK struct {

	/*
	  In: Body
	*/
	Payload *models.PayResponse `json:"body,omitempty"`
}

// NewPayOK creates PayOK with default headers values
func NewPayOK() *PayOK {

	return &PayOK{}
}

// WithPayload adds the payload to the pay o k response
func (o *PayOK) WithPayload(payload *models.PayResponse) *PayOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pay o k response
func (o *PayOK) SetPayload(payload *models.PayResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PayOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PayOK) PayResponder() {}

// PayBadRequestCode is the HTTP code returned for type PayBadRequest
const PayBadRequestCode int = 400

/*
PayBadRequest Bad request

swagger:response payBadRequest
*/
type PayBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPayBadRequest creates PayBadRequest with default headers values
func NewPayBadRequest() *PayBadRequest {

	return &PayBadRequest{}
}

// WithPayload adds the payload to the pay bad request response
func (o *PayBadRequest) WithPayload(payload *models.Error) *PayBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the pay bad request response
func (o *PayBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PayBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *PayBadRequest) PayResponder() {}

type PayNotImplementedResponder struct {
	middleware.Responder
}

func (*PayNotImplementedResponder) PayResponder() {}

func PayNotImplemented() PayResponder {
	return &PayNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.Pay has not yet been implemented",
		),
	}
}

type PayResponder interface {
	middleware.Responder
	PayResponder()
}
