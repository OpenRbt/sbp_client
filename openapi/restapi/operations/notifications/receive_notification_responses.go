// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"sbp/openapi/models"
)

// ReceiveNotificationOKCode is the HTTP code returned for type ReceiveNotificationOK
const ReceiveNotificationOKCode int = 200

/*
ReceiveNotificationOK OK

swagger:response receiveNotificationOK
*/
type ReceiveNotificationOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewReceiveNotificationOK creates ReceiveNotificationOK with default headers values
func NewReceiveNotificationOK() *ReceiveNotificationOK {

	return &ReceiveNotificationOK{}
}

// WithPayload adds the payload to the receive notification o k response
func (o *ReceiveNotificationOK) WithPayload(payload string) *ReceiveNotificationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the receive notification o k response
func (o *ReceiveNotificationOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReceiveNotificationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (o *ReceiveNotificationOK) ReceiveNotificationResponder() {}

/*
ReceiveNotificationDefault Generic error response

swagger:response receiveNotificationDefault
*/
type ReceiveNotificationDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReceiveNotificationDefault creates ReceiveNotificationDefault with default headers values
func NewReceiveNotificationDefault(code int) *ReceiveNotificationDefault {
	if code <= 0 {
		code = 500
	}

	return &ReceiveNotificationDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the receive notification default response
func (o *ReceiveNotificationDefault) WithStatusCode(code int) *ReceiveNotificationDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the receive notification default response
func (o *ReceiveNotificationDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the receive notification default response
func (o *ReceiveNotificationDefault) WithPayload(payload *models.Error) *ReceiveNotificationDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the receive notification default response
func (o *ReceiveNotificationDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReceiveNotificationDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *ReceiveNotificationDefault) ReceiveNotificationResponder() {}

type ReceiveNotificationNotImplementedResponder struct {
	middleware.Responder
}

func (*ReceiveNotificationNotImplementedResponder) ReceiveNotificationResponder() {}

func ReceiveNotificationNotImplemented() ReceiveNotificationResponder {
	return &ReceiveNotificationNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.ReceiveNotification has not yet been implemented",
		),
	}
}

type ReceiveNotificationResponder interface {
	middleware.Responder
	ReceiveNotificationResponder()
}
