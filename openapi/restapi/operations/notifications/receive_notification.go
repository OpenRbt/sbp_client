// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"sbp/internal/entities"
)

// ReceiveNotificationHandlerFunc turns a function with the right signature into a receive notification handler
type ReceiveNotificationHandlerFunc func(ReceiveNotificationParams, *entities.Auth) ReceiveNotificationResponder

// Handle executing the request and returning a response
func (fn ReceiveNotificationHandlerFunc) Handle(params ReceiveNotificationParams, principal *entities.Auth) ReceiveNotificationResponder {
	return fn(params, principal)
}

// ReceiveNotificationHandler interface for that can handle valid receive notification params
type ReceiveNotificationHandler interface {
	Handle(ReceiveNotificationParams, *entities.Auth) ReceiveNotificationResponder
}

// NewReceiveNotification creates a new http.Handler for the receive notification operation
func NewReceiveNotification(ctx *middleware.Context, handler ReceiveNotificationHandler) *ReceiveNotification {
	return &ReceiveNotification{Context: ctx, Handler: handler}
}

/* ReceiveNotification swagger:route POST /notification notifications receiveNotification

ReceiveNotification receive notification API

*/
type ReceiveNotification struct {
	Context *middleware.Context
	Handler ReceiveNotificationHandler
}

func (o *ReceiveNotification) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReceiveNotificationParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *entities.Auth
	if uprinc != nil {
		principal = uprinc.(*entities.Auth) // this is really a entities.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
