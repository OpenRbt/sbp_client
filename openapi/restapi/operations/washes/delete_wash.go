// Code generated by go-swagger; DO NOT EDIT.

package washes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"sbp/internal/entities"
)

// DeleteWashHandlerFunc turns a function with the right signature into a delete wash handler
type DeleteWashHandlerFunc func(DeleteWashParams, *entities.Auth) DeleteWashResponder

// Handle executing the request and returning a response
func (fn DeleteWashHandlerFunc) Handle(params DeleteWashParams, principal *entities.Auth) DeleteWashResponder {
	return fn(params, principal)
}

// DeleteWashHandler interface for that can handle valid delete wash params
type DeleteWashHandler interface {
	Handle(DeleteWashParams, *entities.Auth) DeleteWashResponder
}

// NewDeleteWash creates a new http.Handler for the delete wash operation
func NewDeleteWash(ctx *middleware.Context, handler DeleteWashHandler) *DeleteWash {
	return &DeleteWash{Context: ctx, Handler: handler}
}

/*
	DeleteWash swagger:route DELETE /washes/{id} washes deleteWash

DeleteWash delete wash API
*/
type DeleteWash struct {
	Context *middleware.Context
	Handler DeleteWashHandler
}

func (o *DeleteWash) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteWashParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *entities.Auth
	if uprinc != nil {
		principal = uprinc.(*entities.Auth) // this is really a entities.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
