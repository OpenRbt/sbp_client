// Code generated by go-swagger; DO NOT EDIT.

package washes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"sbp/internal/entities"
)

// GetWashesHandlerFunc turns a function with the right signature into a get washes handler
type GetWashesHandlerFunc func(GetWashesParams, *entities.Auth) GetWashesResponder

// Handle executing the request and returning a response
func (fn GetWashesHandlerFunc) Handle(params GetWashesParams, principal *entities.Auth) GetWashesResponder {
	return fn(params, principal)
}

// GetWashesHandler interface for that can handle valid get washes params
type GetWashesHandler interface {
	Handle(GetWashesParams, *entities.Auth) GetWashesResponder
}

// NewGetWashes creates a new http.Handler for the get washes operation
func NewGetWashes(ctx *middleware.Context, handler GetWashesHandler) *GetWashes {
	return &GetWashes{Context: ctx, Handler: handler}
}

/* GetWashes swagger:route GET /washes washes getWashes

GetWashes get washes API

*/
type GetWashes struct {
	Context *middleware.Context
	Handler GetWashesHandler
}

func (o *GetWashes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWashesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *entities.Auth
	if uprinc != nil {
		principal = uprinc.(*entities.Auth) // this is really a entities.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
