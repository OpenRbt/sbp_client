// Code generated by go-swagger; DO NOT EDIT.

package washes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"sbp/internal/entities"
)

// CreateWashHandlerFunc turns a function with the right signature into a create wash handler
type CreateWashHandlerFunc func(CreateWashParams, *entities.Auth) CreateWashResponder

// Handle executing the request and returning a response
func (fn CreateWashHandlerFunc) Handle(params CreateWashParams, principal *entities.Auth) CreateWashResponder {
	return fn(params, principal)
}

// CreateWashHandler interface for that can handle valid create wash params
type CreateWashHandler interface {
	Handle(CreateWashParams, *entities.Auth) CreateWashResponder
}

// NewCreateWash creates a new http.Handler for the create wash operation
func NewCreateWash(ctx *middleware.Context, handler CreateWashHandler) *CreateWash {
	return &CreateWash{Context: ctx, Handler: handler}
}

/*
	CreateWash swagger:route POST /washes washes createWash

CreateWash create wash API
*/
type CreateWash struct {
	Context *middleware.Context
	Handler CreateWashHandler
}

func (o *CreateWash) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateWashParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *entities.Auth
	if uprinc != nil {
		principal = uprinc.(*entities.Auth) // this is really a entities.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
