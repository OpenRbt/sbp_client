// Code generated by go-swagger; DO NOT EDIT.

package washes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"sbp/internal/entities"
)

// AssignWashToGroupHandlerFunc turns a function with the right signature into a assign wash to group handler
type AssignWashToGroupHandlerFunc func(AssignWashToGroupParams, *entities.Auth) AssignWashToGroupResponder

// Handle executing the request and returning a response
func (fn AssignWashToGroupHandlerFunc) Handle(params AssignWashToGroupParams, principal *entities.Auth) AssignWashToGroupResponder {
	return fn(params, principal)
}

// AssignWashToGroupHandler interface for that can handle valid assign wash to group params
type AssignWashToGroupHandler interface {
	Handle(AssignWashToGroupParams, *entities.Auth) AssignWashToGroupResponder
}

// NewAssignWashToGroup creates a new http.Handler for the assign wash to group operation
func NewAssignWashToGroup(ctx *middleware.Context, handler AssignWashToGroupHandler) *AssignWashToGroup {
	return &AssignWashToGroup{Context: ctx, Handler: handler}
}

/*
	AssignWashToGroup swagger:route POST /groups/{groupId}/washes/{washId} washes groups assignWashToGroup

AssignWashToGroup assign wash to group API
*/
type AssignWashToGroup struct {
	Context *middleware.Context
	Handler AssignWashToGroupHandler
}

func (o *AssignWashToGroup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAssignWashToGroupParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *entities.Auth
	if uprinc != nil {
		principal = uprinc.(*entities.Auth) // this is really a entities.Auth, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
