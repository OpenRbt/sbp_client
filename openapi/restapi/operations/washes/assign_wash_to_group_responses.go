// Code generated by go-swagger; DO NOT EDIT.

package washes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"sbp/openapi/models"
)

// AssignWashToGroupNoContentCode is the HTTP code returned for type AssignWashToGroupNoContent
const AssignWashToGroupNoContentCode int = 204

/*AssignWashToGroupNoContent OK

swagger:response assignWashToGroupNoContent
*/
type AssignWashToGroupNoContent struct {
}

// NewAssignWashToGroupNoContent creates AssignWashToGroupNoContent with default headers values
func NewAssignWashToGroupNoContent() *AssignWashToGroupNoContent {

	return &AssignWashToGroupNoContent{}
}

// WriteResponse to the client
func (o *AssignWashToGroupNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

func (o *AssignWashToGroupNoContent) AssignWashToGroupResponder() {}

/*AssignWashToGroupDefault Generic error response

swagger:response assignWashToGroupDefault
*/
type AssignWashToGroupDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAssignWashToGroupDefault creates AssignWashToGroupDefault with default headers values
func NewAssignWashToGroupDefault(code int) *AssignWashToGroupDefault {
	if code <= 0 {
		code = 500
	}

	return &AssignWashToGroupDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the assign wash to group default response
func (o *AssignWashToGroupDefault) WithStatusCode(code int) *AssignWashToGroupDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the assign wash to group default response
func (o *AssignWashToGroupDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the assign wash to group default response
func (o *AssignWashToGroupDefault) WithPayload(payload *models.Error) *AssignWashToGroupDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the assign wash to group default response
func (o *AssignWashToGroupDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AssignWashToGroupDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *AssignWashToGroupDefault) AssignWashToGroupResponder() {}

type AssignWashToGroupNotImplementedResponder struct {
	middleware.Responder
}

func (*AssignWashToGroupNotImplementedResponder) AssignWashToGroupResponder() {}

func AssignWashToGroupNotImplemented() AssignWashToGroupResponder {
	return &AssignWashToGroupNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.AssignWashToGroup has not yet been implemented",
		),
	}
}

type AssignWashToGroupResponder interface {
	middleware.Responder
	AssignWashToGroupResponder()
}
